const rjx = require('../../dist/rjx.cjs.js');
let c = rjx._rjxComponents.getFunctionFromEval({ body: 'console.log("hello")', });
const MyCustomComponent = rjx._rjxComponents.getReactClassComponent({
  //
  // Initialization function
  //
  getInitialState: {
    body: 'return { status:"not-loaded", name:"rjx test", customNumber:1, }',
    arguments: [],
  },
  getDefaultProps: {
    body: 'return { someProp:1, someOtherProp:2, status:"original status" }',
    arguments: [],
  },
  componentDidMount: {
    body: 'console.log(\'mounted\', \'this.props\',this.props, \'this.state\',this.state)',
    arguments: [],
  },
  componentWillUnmount: {
    body: 'console.log(\'unmounted\',this.props)',
    arguments: [],
  },
  //
  // State change functions
  //
  shouldComponentUpdate: {
    body: 'console.log("should update component",{nextProps,nextState}); return true;',
    arguments: ['nextProps', 'nextState',],
  },
  componentWillUpdate: {
    body: 'console.log("will update component",{nextProps,nextState}); return true;',
    arguments: ['nextProps', 'nextState',],
  },
  componentDidUpdate: {
    body: 'console.log("did update component",{prevProps,prevState}); return true;',
    arguments: ['prevProps', 'prevState',],
  },
  //
  // Prop change functions
  //
  componentWillReceiveProps: {
    body: 'console.log("will recieve props",{nextProps}); return true;',
    arguments: ['nextProps',],
  },
  //
  // RENDER IS THE ONLY ***REQUIRED*** FUNCTION
  //
  render: {
    body: {
      component: 'p',
      props: {
        status: 'from inline prop',
      },
      passprops: true,
      children: [
        {
          component: 'span',
          children: 'My Custom React Component Status: ',
        },
        {
          component: 'span',
          thisprops: {
            children: ['status',],
          },
        },
      ],
    },
  },
});

const sampleRJX = {
  component: 'html',
  children: [
    {
      component: 'head',
      children: [
        {
          component: 'title',
          children:'sample rjx page',
        },
        {
          component: 'meta',
          props: {
            name:'Description',
            content:'RJX page for Express',
          },
        },
      ],
    },
    {
      component: 'body',
      children: [
        {
          component: 'div',
          props: {
            id: 'generatedRJX',
            className: 'rjx',
          },
          resourceprops: {
            title: ['spantext', ],
          },
          // passprops:true,
          children: [
            {
              component: 'h1',
              props: {
                style: {
                  color: 'darkgrey',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                },
              },
              __dangerouslyEvalProps: {
                onClick: '()=>()=>alert("click works")',
              },
              children: 'Hello RJX World!',
            },
            {
              component: 'p',
              passprops:true,
              children: [
                {
                  component: 'span',
                  children: 'Browser URL: ',
                },
                {
                  component: 'span',
                        
                  thisprops: {
                    _children: ['spantext', ],
                  },
                },
              ],
            },
            // {
            //   component: 'MyCustomComponent',
            //   props: {
            //     status: 'Amazing',
            //   },
            // },
            {
              p: {
                props: {
                  style: {
                    color: 'blue',
                  },
                },
                children: 'this is using shorthand rjx',
              },
            },
          ],
        },
        {
          component: 'script',
          props: {
            type:'text/javascript',
            dangerouslySetInnerHTML: {
              __html: 'console.log("hello");',
            },
          },
        }
      ],
    },
  ],
};

module.exports = sampleRJX;